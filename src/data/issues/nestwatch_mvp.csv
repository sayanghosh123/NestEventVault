title,body,labels,assignees,milestone
"1.01: Create Google Account or reuse an existing one","Prerequisites: None. Go to https://accounts.google.com/signup and create a new Google (gmail.com) account to be used for the Device Access project. Record the username and recovery email for future reference.","setup,backend",sayanghosh123,v1
"1.02: Pay Google Device Access Fee","Prerequisites: 1.01. Visit the Device Access Console at https://console.nest.google.com/device-access and sign in with your Google account. Click 'Get Started', follow the prompts, and pay the US$5 one-time fee using your preferred payment method. Save the payment confirmation email or screenshot for documentation.","setup,backend",sayanghosh123,v1
"1.03: Register Device Access Project","Prerequisites: 1.02. In the Device Access Console (https://console.nest.google.com/device-access), click 'Create Project'. Enter a project name, accept the terms, and complete the process. Once created, record the Project ID and project name. Reference: https://developers.google.com/nest/device-access/project","setup,backend",sayanghosh123,v1
"1.04: Enable Device Access API","Prerequisites: 1.03. Go to the Google Cloud Console at https://console.cloud.google.com/apis/library/smartdevicemanagement.googleapis.com. Select your Device Access project from the dropdown. Click 'Enable' to activate the Smart Device Management (SDM) API. Reference: https://developers.google.com/nest/device-access/enable-api","setup,backend",sayanghosh123,v1
"1.05: Create GCP Project","Prerequisites: 1.03. In the Google Cloud Console (https://console.cloud.google.com/projectcreate), click 'New Project'. Enter a name and select your organization (if applicable). Click 'Create'. Record the Project ID. Reference: https://cloud.google.com/resource-manager/docs/creating-managing-projects","setup,backend",sayanghosh123,v1
"1.06: Create OAuth 2.0 Credentials","Prerequisites: 1.05, 1.04. In the Google Cloud Console, go to https://console.cloud.google.com/apis/credentials. Click 'Create Credentials' > 'OAuth client ID'. Select 'Web application', set a name, and add authorized redirect URIs as needed. Click 'Create' and download the client ID and secret. Store securely. Reference: https://developers.google.com/identity/protocols/oauth2","setup,backend",sayanghosh123,v1
"1.07: Link Google Account to Device Access Project","Prerequisites: 1.06. In the Device Access Console (https://console.nest.google.com/device-access), select your project. Click 'Add Account', follow the prompts to link your Google account, and grant required permissions. Confirm linking is successful and document the process. Reference: https://developers.google.com/nest/device-access/account-linking","setup,backend",sayanghosh123,v1
"1.08: Create Azure Account","Prerequisites: None. Go to https://azure.microsoft.com/en-au/free/ and sign up for a new Azure account if you don't already have one. Record the account email and subscription details.","setup,backend",sayanghosh123,v1
"1.09: Create Azure Blob Storage Account","Prerequisites: 1.08. In the Azure Portal (https://portal.azure.com), search for 'Storage accounts' and click 'Create'. Fill in the required fields, select 'BlobStorage' as the account kind, and complete the wizard. Record the storage account name and region. Reference: https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-portal","setup,backend",sayanghosh123,v1
"1.10: Create Azure Storage Container","Prerequisites: 1.09. In the Azure Portal, navigate to your Storage Account. Click 'Containers' > 'New Container'. Name it 'events' (or similar) and set access level to 'Private'. Record the container name. Reference: https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-portal#create-a-container","setup,backend",sayanghosh123,v1
"1.11: Generate Azure Storage Access Keys","Prerequisites: 1.09. In the Azure Portal, go to your Storage Account > 'Access keys'. Copy both primary and secondary keys. Store them securely for backend integration. Reference: https://learn.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage","setup,backend",sayanghosh123,v1
"1.12: Design Event Metadata Schema","Prerequisites: None. Define a JSON schema for event metadata including: event_id, timestamp, event_type, device_id, device_name, snapshot_url (optional), and other relevant fields. Save as schema.json in the repo. Reference: https://json-schema.org/learn/getting-started-step-by-step.html","design,backend",sayanghosh123,v1
"1.13: Set Up GitHub Repository","Prerequisites: None. Go to https://github.com/new and create a new repository. Add folders: /backend, /frontend, /docs, /scripts. Add a README.md with a project overview and setup instructions.","setup,documentation",sayanghosh123,v1
"2.01: Implement OAuth 2.0 Authentication Module","Prerequisites: 1.06. In your backend code, use the OAuth client ID and secret to implement authentication with the SDM API. Use a library like google-auth-library for Node.js or google-auth for Python. Implement token storage and refresh logic. Test with a sample API call. Reference: https://developers.google.com/identity/protocols/oauth2","backend,api",sayanghosh123,v1
"2.02: Set Up Google Pub/Sub Subscription","Prerequisites: 2.01. In the Google Cloud Console (https://console.cloud.google.com/cloudpubsub), create a new Pub/Sub topic (e.g., 'nest-events'). Then create a subscription to this topic. Record topic and subscription names. Reference: https://cloud.google.com/pubsub/docs/quickstart-console","backend,api",sayanghosh123,v1
"2.03: Implement Pub/Sub Listener Service","Prerequisites: 2.02. Write a backend service (Node.js, Python, etc.) that connects to the Pub/Sub subscription. Use the Google Cloud Pub/Sub client library to listen for messages. Log all received messages to a file for debugging. Reference: https://cloud.google.com/pubsub/docs/pull","backend,api",sayanghosh123,v1
"2.04: Parse Event Payloads","Prerequisites: 2.03, 1.12. Implement code to parse incoming event payloads according to the event metadata schema. Extract fields such as event_id, timestamp, event_type, device_id, etc. Reference: https://developers.google.com/nest/device-access/traits","backend,api",sayanghosh123,v1
"2.05: Normalize Event Data","Prerequisites: 2.04. Write logic to normalize parsed event data, ensuring consistent formatting for all event types (motion, person, sound, etc.). Output normalized data as JSON objects.","backend,api",sayanghosh123,v1
"2.06: Save Event Metadata to Azure Blob Storage","Prerequisites: 2.05, 1.10, 1.11. Use Azure SDK (https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-nodejs) to save normalized event metadata as JSON files in the Azure Blob Storage container. Organize files by date and device.","backend,storage",sayanghosh123,v1
"2.07: Download and Store Event Snapshots","Prerequisites: 2.05, 2.06. For events with snapshot URLs, use HTTP requests to download images and upload them to Azure Blob Storage. Update event metadata with the blob URL. Reference: https://developers.google.com/nest/device-access/traits/camera-event-image","backend,storage",sayanghosh123,v1
"2.08: Implement Error Handling and Logging","Prerequisites: 2.06, 2.07. Add error handling and logging for all backend operations using a logging library (e.g., Winston for Node.js, logging for Python). Ensure retries for failed operations and log critical errors.","backend,logging",sayanghosh123,v1
"2.09: Write Backend Unit Tests","Prerequisites: 2.01-2.08. Use a testing framework (e.g., Jest for Node.js, pytest for Python) to write unit tests for authentication, event parsing, normalization, storage, and error handling modules.","backend,testing",sayanghosh123,v1
"3.01: Choose Event Indexing Database","Prerequisites: 2.06. Evaluate and select a database for event indexing (Azure Table Storage, Cosmos DB, or SQLite). Document the choice and rationale.","design,backend",sayanghosh123,v2
"3.02: Design Index Schema","Prerequisites: 3.01. Define the schema for event indexing, supporting queries by date, type, and keyword. Document the schema.","design,backend",sayanghosh123,v2
"3.03: Implement Indexing Logic","Prerequisites: 3.02. Implement code to store event metadata in the chosen index/database as events are processed.","backend,storage",sayanghosh123,v2
"3.04: Develop Search API Endpoints","Prerequisites: 3.03. Create RESTful API endpoints to search/filter events by date, month, year, event type, and keyword. Return paginated results.","backend,api",sayanghosh123,v2
"3.05: Secure Search API Endpoints","Prerequisites: 3.04. Implement authentication and authorization for API endpoints using JWT or OAuth.","backend,security",sayanghosh123,v2
"3.06: Write Search API Tests","Prerequisites: 3.05. Write unit and integration tests for search API endpoints, including filtering, pagination, and security.","backend,testing",sayanghosh123,v2
"4.01: Initialize Frontend Project","Prerequisites: 1.13. Set up frontend using React, Vue, or Angular. Configure project structure and install dependencies.","frontend,setup",sayanghosh123,v2
"4.02: Create Dashboard UI Mockups","Prerequisites: 4.01. Design wireframes for the event dashboard, including event list, filters, and detail views. Save mockups in the docs folder.","frontend,design",sayanghosh123,v2
"4.03: Build Event List/Table Component","Prerequisites: 4.02. Implement a component to display events in a sortable, paginated table. Show key metadata fields and snapshot thumbnails.","frontend,ui",sayanghosh123,v2
"4.04: Add Date/Month/Year/Event Type Filters","Prerequisites: 4.03. Add UI controls for filtering events by date (calendar picker), month, year, and event type (checkbox/dropdown).","frontend,ui",sayanghosh123,v2
"4.05: Implement Keyword Search Bar","Prerequisites: 4.04. Add a search bar for filtering events by keyword. Connect to backend search API.","frontend,ui",sayanghosh123,v2
"4.06: Display Event Snapshots","Prerequisites: 4.03. Show preview images for events with available snapshots. Handle image loading and errors.","frontend,ui",sayanghosh123,v2
"4.07: Implement Loading, Empty, and Error States","Prerequisites: 4.03. Add UI for loading, empty results, and error messages. Provide retry options.","frontend,ui",sayanghosh123,v2
"4.08: Make Dashboard Responsive","Prerequisites: 4.03. Apply responsive design to ensure the dashboard works on desktop and mobile.","frontend,ui",sayanghosh123,v2
"4.09: Connect Frontend to Search API","Prerequisites: 3.04, 4.03. Integrate frontend components with backend search API. Fetch and display results dynamically.","frontend,api",sayanghosh123,v2
"4.10: Add Frontend Authentication","Prerequisites: 3.05, 4.09. Implement login/logout for the dashboard using JWT or OAuth if required.","frontend,security",sayanghosh123,v2
"4.11: Write Frontend Unit Tests","Prerequisites: 4.03-4.10. Write unit tests for all frontend components and flows.","frontend,testing",sayanghosh123,v2
"5.01: Set Up Backend CI/CD Pipeline","Prerequisites: 2.09. Configure CI/CD for backend (Azure Functions, Docker, or VM). Automate build, test, and deploy steps.","devops,backend",sayanghosh123,v3
"5.02: Set Up Frontend CI/CD Pipeline","Prerequisites: 4.11. Configure CI/CD for frontend (Azure Web App, static hosting). Automate build and deploy steps.","devops,frontend",sayanghosh123,v3
"5.03: Write Setup Documentation","Prerequisites: 1.01-5.02. Document setup for Google Device Access, Azure, backend, and frontend. Include environment variables and configuration.","documentation",sayanghosh123,v3
"5.04: Write Maintenance Guide","Prerequisites: 5.03. Document common issues, monitoring, and maintenance procedures.","documentation",sayanghosh123,v3
"5.05: Prepare Demo Data and User Guide","Prerequisites: 5.03. Create sample event data and a user guide for using the dashboard. Include screenshots and tips.","documentation",sayanghosh123,v3
"6.01: Implement Monitoring and Alerts","Prerequisites: 5.01, 5.02. Set up monitoring for backend and frontend errors. Configure alerts for failures or downtime.","devops,monitoring",sayanghosh123,v3
"6.02: Collect User Feedback","Prerequisites: 5.05. Gather feedback from users on dashboard usability and features. Summarize findings and suggest improvements.","frontend,enhancement",sayanghosh123,v3
"6.03: Plan Future Enhancements","Prerequisites: 6.02. Create a backlog of future features such as export, notifications, and analytics. Prioritize and document ideas.","enhancement,planning",sayanghosh123,v3
